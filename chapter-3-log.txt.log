var x = 1;
{
  var x = 2;
}
console.log(x); // 2

VM18:5 2
undefined
while (x < 10) {
  x++;
}

9
if (condition) {
  statement1;
} else {
  statement2;
}

VM26:1 Uncaught ReferenceError: condition is not defined
    at <anonymous>:1:1
(anonymous) @ VM26:1
if (condition1) {
  statement1;
} else if (condition2) {
  statement2;
} else if (conditionN) {
  statementN;
} else {
  statementLast;
}

VM30:1 Uncaught ReferenceError: condition1 is not defined
    at <anonymous>:1:1
(anonymous) @ VM30:1
if (x = y) {
  // statements here
}

VM34:1 Uncaught ReferenceError: y is not defined
    at <anonymous>:1:1
(anonymous) @ VM34:1
const b = new Boolean(false);
if (b) {
  // this condition evaluates to true
}
if (b == true) {
  // this condition evaluates to false
}

undefined
function checkData() {
  if (document.form1.threeChar.value.length === 3) {
    return true;
  } else {
    alert(
      `Enter exactly three characters. ${document.form1.threeChar.value} is not valid.`,
    );
    return false;
  }
}

undefined
switch (fruitType) {
  case "Oranges":
    console.log("Oranges are $0.59 a pound.");
    break;
  case "Apples":
    console.log("Apples are $0.32 a pound.");
    break;
  case "Bananas":
    console.log("Bananas are $0.48 a pound.");
    break;
  case "Cherries":
    console.log("Cherries are $3.00 a pound.");
    break;
  case "Mangoes":
    console.log("Mangoes are $0.56 a pound.");
    break;
  case "Papayas":
    console.log("Mangoes and papayas are $2.79 a pound.");
    break;
  default:
    console.log(`Sorry, we are out of ${fruitType}.`);
}
console.log("Is there anything else you'd like?");

VM46:1 Uncaught ReferenceError: fruitType is not defined
    at <anonymous>:1:1
(anonymous) @ VM46:1
throw expression;

VM50:1 Uncaught ReferenceError: expression is not defined
    at <anonymous>:1:1
(anonymous) @ VM50:1
throw "Error2"; // String type
throw 42; // Number type
throw true; // Boolean type
throw {
  toString() {
    return "I'm an object!";
  },
};

VM54:1 Uncaught Error2
(anonymous) @ VM54:1
function getMonthName(mo) {
  mo--; // Adjust month number for array index (so that 0 = Jan, 11 = Dec)
  const months = [
    "Jan", "Feb", "Mar", "Apr", "May", "Jun",
    "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
  ];
  if (months[mo]) {
    return months[mo];
  } else {
    throw new Error("InvalidMonthNo"); // throw keyword is used here
  }
}

try {
  // statements to try
  monthName = getMonthName(myMonth); // function could throw exception
} catch (e) {
  monthName = "unknown";
  logMyErrors(e); // pass exception object to error handler (i.e. your own function)
}

VM58:19 Uncaught ReferenceError: logMyErrors is not defined
    at <anonymous>:19:3
(anonymous) @ VM58:19
try {
  throw "myException"; // generates an exception
} catch (err) {
  // statements to handle any exceptions
  logMyErrors(err); // pass exception object to error handler
}

VM62:5 Uncaught ReferenceError: logMyErrors is not defined
    at <anonymous>:5:3
(anonymous) @ VM62:5
openMyFile();
try {
  writeMyFile(theData); // This may throw an error
} catch (e) {
  handleError(e); // If an error occurred, handle it
} finally {
  closeMyFile(); // Always close the resource
}

VM66:1 Uncaught ReferenceError: openMyFile is not defined
    at <anonymous>:1:1
(anonymous) @ VM66:1
function f() {
  try {
    console.log(0);
    throw "bogus";
  } catch (e) {
    console.log(1);
    // This return statement is suspended
    // until finally block has completed
    return true;
    console.log(2); // not reachable
  } finally {
    console.log(3);
    return false; // overwrites the previous "return"
    console.log(4); // not reachable
  }
  // "return false" is executed now
  console.log(5); // not reachable
}
console.log(f()); // 0, 1, 3, false

VM70:3 0
VM70:6 1
VM70:12 3
VM70:19 false
undefined
function f() {
  try {
    throw "bogus";
  } catch (e) {
    console.log('caught inner "bogus"');
    // This throw statement is suspended until
    // finally block has completed
    throw e;
  } finally {
    return false; // overwrites the previous "throw"
  }
  // "return false" is executed now
}

try {
  console.log(f());
} catch (e) {
  // this is never reached!
  // while f() executes, the `finally` block returns false,
  // which overwrites the `throw` inside the above `catch`
  console.log('caught outer "bogus"');
}

// Logs:
// caught inner "bogus"
// false

VM74:5 caught inner "bogus"
VM74:16 false
undefined
function doSomethingErrorProne() {
  if (ourCodeMakesAMistake()) {
    throw new Error("The message");
  } else {
    doSomethingToGetAJavaScriptError();
  }
}

try {
  doSomethingErrorProne();
} catch (e) {
  // Now, we actually use `console.error()`
  console.error(e.name); // 'Error'
  console.error(e.message); // 'The message', or a JavaScript error message
}

VM78:13 ReferenceError
(anonymous) @ VM78:13
VM78:14 ourCodeMakesAMistake is not defined
(anonymous) @ VM78:14
undefined
