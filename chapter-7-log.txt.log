1234567890
42

42
0888 // 888 parsed as decimal
0777 // parsed as octal, 511 in decimal

511
0b10000000000000000000000000000000 // 2147483648
0b01111111100000000000000000000000 // 2139095040
0B00000000011111111111111111111111 // 8388607

8388607
0O755 // 493
0o644 // 420

420
const n = 0755; // 493
undefined
const m = 0644; // 420
undefined
0xFFFFFFFFFFFFFFFFF // 295147905179352830000
295147905179352830000
0x123456789ABCDEF   // 81985529216486900
81985529216486900
0XA                 // 10
10
0e-5   // 0
0
0e+5   // 0
5e1    // 50
175e-2 // 1.75
1e3    // 1000
1e-3   // 0.001
1E3    // 1000
1000
const biggestNum = Number.MAX_VALUE;
const smallestNum = Number.MIN_VALUE;
const infiniteNum = Number.POSITIVE_INFINITY;
const negInfiniteNum = Number.NEGATIVE_INFINITY;
const notANum = Number.NaN;

undefined
Math.PI;

3.141592653589793
Math.sin(1.56);

0.9999417202299663
const b1 = 123n;
// Can be arbitrarily large.
const b2 = -1234567890987654321n;

undefined
const b1 = BigInt(123);
// Using a string prevents loss of precision, since long number
// literals don't represent what they seem like.
const b2 = BigInt("-1234567890987654321");

undefined
const integer = 12 ** 34; // 4.9222352429520264e+36; only has limited precision
const bigint = 12n ** 34n; // 4922235242952026704037113243122008064n

undefined
const bigintDiv = 5n / 2n; // 2n, because there's no 2.5 in BigInt

undefined
function JSClock() {
  const time = new Date();
  const hour = time.getHours();
  const minute = time.getMinutes();
  const second = time.getSeconds();
  let temp = String(hour % 12);
  if (temp === "0") {
    temp = "12";
  }
  temp += (minute < 10 ? ":0" : ":") + minute;
  temp += (second < 10 ? ":0" : ":") + second;
  temp += hour >= 12 ? " P.M." : " A.M.";
  return temp;
}

undefined
